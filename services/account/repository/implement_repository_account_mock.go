// Code generated by mockery v2.42.0. DO NOT EDIT.

package repository

import (
	context "context"
	models "tinder-cloning/models"

	mock "github.com/stretchr/testify/mock"

	schema "tinder-cloning/services/account/schema"

	sql "database/sql"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: ctx, sqlTx, data
func (_m *MockRepository) CreateOne(ctx context.Context, sqlTx *sql.Tx, data *models.Account) (string, *sql.Tx, error) {
	ret := _m.Called(ctx, sqlTx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateOne")
	}

	var r0 string
	var r1 *sql.Tx
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *models.Account) (string, *sql.Tx, error)); ok {
		return rf(ctx, sqlTx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *models.Account) string); ok {
		r0 = rf(ctx, sqlTx, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *models.Account) *sql.Tx); ok {
		r1 = rf(ctx, sqlTx, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *sql.Tx, *models.Account) error); ok {
		r2 = rf(ctx, sqlTx, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOne provides a mock function with given fields: ctx, props
func (_m *MockRepository) FindOne(ctx context.Context, props schema.AccountFilter) (*models.Account, error) {
	ret := _m.Called(ctx, props)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.AccountFilter) (*models.Account, error)); ok {
		return rf(ctx, props)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.AccountFilter) *models.Account); ok {
		r0 = rf(ctx, props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.AccountFilter) error); ok {
		r1 = rf(ctx, props)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
