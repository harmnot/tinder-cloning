// Code generated by mockery v2.42.0. DO NOT EDIT.

package repository

import (
	context "context"
	models "tinder-cloning/models"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: ctx, sqlTx, data
func (_m *MockRepository) CreateOne(ctx context.Context, sqlTx *sql.Tx, data *models.Membership) (*sql.Tx, error) {
	ret := _m.Called(ctx, sqlTx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateOne")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *models.Membership) (*sql.Tx, error)); ok {
		return rf(ctx, sqlTx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *models.Membership) *sql.Tx); ok {
		r0 = rf(ctx, sqlTx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *models.Membership) error); ok {
		r1 = rf(ctx, sqlTx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: ctx, accountID
func (_m *MockRepository) GetOne(ctx context.Context, accountID string) (*models.Membership, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetOne")
	}

	var r0 *models.Membership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Membership, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Membership); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
